note_1:
  id: 1
  subject: "在Linux、BSD上安装Sphinx/Coreseek"
  content: "   1.将你下载的tar包解压，并进入coreseek 子目录:
      $ tar xzvf coreseek-3.2.3.tar.gz
      $ cd coreseek
   2.首先安装MMSeg:
      $ cd mmseg
      $ ./configure --prefix=/usr/local/mmseg
      $ make
      $ make install
      $ cd ..
   3.运行配置 程序:
      $ ./configure
      configure程序有很多运行选项。完整的列表可以通过使用 --help 开关得到。最重要的如下：
          * --prefix, 定义将Coreseek安装到何处;比如 --prefix=/usr/local/coreseek (以下全部示例都假定Coreseek安装在这个位置)
          * --with-mysql, 当自动检测失败时，指出在那里能找到MySQL 头文件和库文件;
          * --with-pgsql, 指出在那里能找到PostgreSQL头文件和库文件.
          * --with-mmseg, 启用基于MMSeg的中文分词法，并指出在那里能找到MMSeg头文件和库文件.
          * --with-python, 启用Python数据源支持. 需要预先安装Python2.6.
   4.编译源代码生成二进制程序:
      $ make
   5.安装二进制程序到你设定的目录下: (类Unix操作系统下默认为 /usr/local/bin/ , 但是可以被 configure --prefix) 修改安装目录

      $ make install"
  category_id: 1
  user_id: 1
  category_name: "web server"
  access: "self"
  
note_2:
  id: 2
  subject: "Thread,Socket从头开始"
  content: "在网上看了很多关于Thread和Socket的资料，项目中也用到不少，但是都是比较简单，或者是用一些现成的，现在想从头开始，慢慢的再学习。希望能和各位前辈进行交流。接触的需求好多一开始比较简单，后来就慢慢复杂了，我想这个学的过程也是，先来个简单的，然后再慢慢的进行完善。好了，不废话了。
场景：客户端将键盘输入的字符通过socket发送到服务端，当输入的字符为“exit”时，程序退出，服务端仅仅将接收到的信息打印出来。 "
  category_id: 1
  user_id: 3
  category_name: "web server"
  access: "self"

note_3:
  id: 3
  subject: "年度书籍推荐 "
  content: "列一下读过的书吧，希望对大家有用。

1《oracle性能诊断艺术》
oracle诊断不可不读的好书。

2《构建oracle高可用环境》 淘宝dba不可错过

3 《hadoop权威指南》 云计算的基础

4 《分布式java应用》 淘宝又见淘宝

5《敏捷开发的艺术》
关于项目的过程，我们需要更高效的过程。生猛于rup

6《面向对象的分析与设计》对于uml和理解还需要加深，原来自己才是一个小不点。

7《架构之美》 没有看太懂，这书太虚了，没有看到什么实质性内容。以后再也不看这种书了，浪费时间。

8《测试驱动开发的艺术》 关于测试驱动，关于敏捷的思考 。

9《UML模式和应用》 佩服国外大师对于uml的理解，对项目指导意义不小。震撼不小！

10 《构建高性能的web站点》
一本指导构建高性能站点的书籍，看的收益不小。

11 《人月神话》
如何才能更好的构建软件

12《代码整洁之道》
写了这么多的代码，整洁的代码才不被后人骂。

13《项目管理之美》
这种XX之美之类的书，少买为好。不实在，不厚道。

14《设计模式之禅》
以前读《java与模式》时，读的时候很有感觉。有些还是不能理解，再读此书又是一种滋味。

15《代码大全》
像是一本百科全书，十八般武艺样样都有了。看了这本书，不会武功的也能耍一阵子。

16《java并发编程实践》
不可多得并发编程的好书，在淘宝上面淘来的影印的。

17《java加密与解密的艺术》
修练这种功夫还是需要的，毕竟这个世界给人以不安全的感觉。房价又涨了，哎…………

18《程序员修炼之道》
还成，多数修改之道没有读之前已经俱备，呵呵，难道说……

19《高效程序员的45个习惯》
让我们更敏捷，确实现在人民币都在贬值，我们也需要高效的cording

20 《数据库系统概念》
越是到这时候，越是感觉自己的内功修为不够。修习高级的忍术还需要内功够才行。即更多的查可拉。
看火影看得通窍了，我一定要成为火影。

那么我们一定要成为什么呢？


以下为引用一下江南白衣的
呵呵。也是下一个里程碑吧。

总有些脱不开烟火气的惫懒。为了那些\"将来\"，今年要读的书:

一、架构模式
   模式，就仿佛一个代号。一个大的架构，总能分拆成一个个代号与符号来演绎。
   SOA、ESB、SCA，注定了还是这一两年内纠缠着业界和客户的名词，大型架构内应用间的集成交互、性能、伸缩性、可靠性、可管理性、可扩展性、安全性，永远都是设计人员的心头好。

《Pattern-Oriented Software Architecture, Volume 4 -- A Pattern Language forDistributed Computing》架构模式的超级集大成目录。愿出版社快点翻出中文版造福市民。
《企业集成模式：设计、构建及部署消息传递解决方案》，重读之，Mule、Apache Camel、Spring Intergration都是它最实际的解释者。
   下半年国外还会有些关于SOA与ESB的书要出来，如《SOA Design Patterns》，《Open-Source ESBs in Action》，《Service-Oriented Architecture and Event-Driven Architecture: J2EE Integrated Solutions》，静待。
    而关于X性的书，下半年会有本《Patterns for Fault Tolerant Software》。

二、BI
    越是Web2.0，越需要BI，比如豆瓣起家的法宝。
    而且，离什么算法高数都好遥远了，忽然间看回一排排数字，心里很意动，感觉又成为了《世界尽头与冷酷仙境》里的计算士。

《Programming Collective Intelligence -- Building Smart Web 2.0 Applications》 Web2.0里的群体智慧。愿出版社的动作更快一点。
《数据挖掘--实用机器学习技术 2nd》 Weka作者的书。
    还有一本《Collective Intelligence in Action》国外下半年会出版，这次是for Java程序员的，有weka，有java data mining api。

三、基础

      越来越远离补充基础的年龄，赶紧多看点书了。

《代码大全2nd》，细读之，书是好书，尤其是对于刚毕业两三年的人。对于一把年纪的，看了总比不看好。
《Beautiful Code》，也是闲得没事看的，继续盼望出版社赶快译快校。

引用江南白衣的一段话
作者：江南白衣，原文出处： http://blog.csdn.net/calvinxiu/archive/2007/03/06/1522032.aspx，转载请保留。

   为了2007年的目标，列了下面待读或重读的书单。
   \"其实中国程序员，现在最需要的是一张安静的书桌。\"，的确，中国架构师大多缺乏系统的基础知识，与其自欺欺人的宣扬\"读书无用，重在实践变通，修身立命哲学书更重要\"，把大好时间用来追逐互联网上的片言只语，不如直面缺陷，系统的学习一次。"
  category_id: 1
  user_id: 5
  category_name: "web server"
  access: "self"
  
note_4:
  id: 4
  subject: "rails部署服务器的选择"
  content: "第一次在这里发帖子，希望大家多多关照。

我们公司打算用rails开发一个企业ERP系统。从网上找的资料看RoR的部署方案五花八门，Apache/Fastcgi，Apache /Mongrel，lighttpd/Fastcgi，Nigix/Mongrel，还有什么passenger，thin，看得我眼花缭乱，搞不清楚哪种方式更好一些。

系统上线后预计的并发可能在100左右，不会很大，但因为业务比较复杂，有些查询可能时间很长，会持续若干秒。而且静态内容很少。不像网站大部分都是短查询和静态文件。

以前开发rails用过apache+mongrel，但Mongrel在执行Rails代码的过程中是加锁的状态，基本上是单进程。所以需要启动多个Mongrel进程。但如果考虑到生产环境同时并发多个长查询的时候，每个mongrel就会被阻塞数秒，也就是说可能需要启动几十个甚至100个 mongrel进程（也不知道我理解得对不对？）。如果每个mongrel进程消耗几十MB，几十个进程就会占用大量的内存。个人感觉好像不是一个很好的方案。

不知道对于这种并发数不算太高，但请求时间较长的系统，那种部署方案才最合理呢？请各位高手大大给点意见吧。有经验的指点一下子，可能我就会少走一点弯路。谢谢！"
  category_id: 1
  user_id: 2
  category_name: "web server"
  access: "self"
  
note_5:
  id: 5
  subject: "2010年度关于InnoDB最给力的资料连载：《MySQL技术内幕：InnoDB存储引擎》"
  content: "本书是国内目前唯一的一本关于InnoDB的著作，由资深MySQL专家亲自执笔，中外数据库专家联袂推荐，权威性毋庸置疑。
内容深入，从源代码的角度深度解析了InnoDB的体系结构、实现原理、工作机制，并给出了大量最佳实践，能帮助你系统而深入地掌握InnoDB，更重要的是，它能为你设计和管理高性能、高可用的数据库系统提供绝佳的指导。注重实战，全书辅有大量的案例，可操作性极强。
全书首先全景式地介绍了MySQL独有的插件式存储引擎，分析了MySQL的各种存储引擎的优势和应用环境；接着以InnoDB的内部实现为切入点，逐一详细讲解了InnoDB存储引擎内部的各个功能模块，包括InnoDB存储引擎的体系结构、内存中的数据结构、基于InnoDB存储引擎的表和页的物理存储、索引与算法、文件、锁、事务、备份，以及InnoDB的性能调优等重要的知识；最后深入解析了InnoDB存储引擎的源代码结构，对大家阅读和理解 InnoDB的源代码有重要的指导意义。
本书适合所有希望构建和管理高性能、高可用性的MySQL数据库系统的开发者和DBA阅读。"
  category_id: 1
  user_id: 4
  category_name: "web server"
  access: "self"
  
note_6:
  id: 6
  subject: "EMC笔试题（最后一道编程题）"
  content: "昨天去EMC面试，有个题没写出来，只写了个思路，想和大家讨论下
题目是这样的：7*8的一个棋盘，即有56个格子。格子上随机放上小球。小球只可以做水平或者垂直方向运动。
小球相互可以碰撞，碰撞的情况为：
如果两个小球相邻，比如Ball(1, 3)和Ball (1, 4)，这时远处的小球Ball(1, 1)移动过来撞到Ball(1, 3)，Ball(1, 1)应该停止在(1, 2)位置，同时Ball(1, 3)把碰撞传递给Ball(1, 4)后，Ball(1,3)仍然不动， Ball(1, 4)被撞开，以此类推。
Ball(1, 1) => Ball(1, 3), Ball(1, 4)
如果一个方向上没有其他的小球存在，那么不允许直接将小球沿着这个方向直接移出棋盘。

例如下图中，G表示小球，那么(2,2)位置上的小球只能向右或向下移动，因为(2, 2)位置的小球的上方和左方都没有小球，规则不允许把(2, 2)位置的小球沿上、左方移动从而直接移出棋盘。同理，(4, 2)位置的小球只允许向左移动。

＃＃＃ # # # #
＃G # G # # #
# # #  # # # #
# G #  # # # #
# # #  # # # #
# # #  # # # #
# # #  # # # #
# # #  # # # #
两个球相邻是不能动的。中间一定要有至少一个的空格。
当碰撞过后，只有一个球在棋盘上为有解。否则无解。
每次选择任意一个球开始运动，碰撞完成后，可以选择任意剩下小球开始运动。
请写出一个程序，任意初始化棋盘上的小球，然后判断是否有解，有解打印出球移动步骤，否则输入无解。 "
  category_id: 1
  user_id: 2
  category_name: "web server"
  access: "everyone"
  
note_7:
  id: 7
  subject: "阿里巴巴常用面试题"
  content: "前几天参加了阿里巴巴的电话面试，把他们问的问题都记录了下来，希望对那些正准备面试的人有用。
一、String,StringBuffer, StringBuilder 的区别是什么？String为什么是不可变的？
二、VECTOR,ARRAYLIST, LINKEDLIST的区别是什么？
三、HASHTABLE, HASGMAQ，TreeMap区别
四、ConcurrentMap和HashMap的区别
五、Tomcat，apache，jboss的区别
六、GET POST区别
七、SESSION, COOKIE区别
八、Servlet的生命周期
九、HTTP 报文包含内容
十、Statement与PreparedStatement的区别,什么是SQL注入，如何防止SQL注入
十一、redirect, foward区别
十二、关于JAVA内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，
几个对象，几个属性，几个方法。
十三、谈谈Hibernate的理解，一级和二级缓存的作用，在项目中Hibernate都是怎么使用缓存的
十四、反射讲一讲，主要是概念,都在哪需要反射机制，反射的性能，如何优化
十五、谈谈Hibernate与Ibatis的区别，哪个性能会更高一些
十六、对Spring的理解，项目中都用什么？怎么用的？对IOC、和AOP的理解及实现原理
十七、线程同步，并发操作怎么控制
十八、描述struts的工作流程。
十九、Tomcat的session处理，如果让你实现一个tomcatserver，如何实现session机制
二十、关于Cache(Ehcache,Memcached)
二一、sql的优化相关问题
二二、oracle中 rownum与rowid的理解，一千条记录我查200到300的记录怎么查？
二三、如何分析ORACLE的执行计划？
二四、 DB中索引原理，种类，使用索引的好处和问题是什么？
二五、JVM垃圾回收实现原理。垃圾回收的线程优先级。
二六、jvm 最大内存设置。设置的原理。结合垃圾回收讲讲。"
  category_id: 1
  user_id: 4
  category_name: "web server"
  access: "everyone"
  
note_8:
  id: 8
  subject: "FireJSPT"
  content: "FireBug的概况收集尽管还是比较好用，但是由于他是普遍式的性能跟踪，我们要在包含所有的JQ函数的跟踪信息的情况下，找到对我们有用的自定义的函 数性能信息并不容易。所以，为了自定义客户端性能测试的方便，我利用FireBug的插件API ，写了一个基于FireFox的性能测试工具FireJSPT ( Fire JavaScript Performance Test )，简要介绍如下：

1. 环境说明：
    * firejspt不依赖于任何的插件库，即使脱离jQuery也能很好的工作。
    * 目前只是在装有FireBug插件的浏览器上起作用，包括FireFox，Chrome ，对IE无效。
"
  category_id: 1
  user_id: 1
  category_name: "web server"
  access: "everyone"

note_9:
  id: 9
  subject: "UED用户体验的八大误区，到底什么才是真正的用户体验？【原创】"
  content: "最近各大网站开发领域，最热门的词就是“UED用户体验”， 可是什么才是真正的用户体验呢？ 在用户体验理论与实施中，又有哪些误区呢？
1. 误区一：过度追求完美

就拿本公司来说，一个项目还没上线，就已经几易其稿，设计者自己在不停的自我YY，说用户一定会喜欢这样，一定会喜欢那样。到最后，网站还没上线，UI设计人员和前端开发人员，已经被折腾得不像人样了。其实，UED是一个需要用户参与的过程 ，不经过真实用户的检验，是永远不能理解用户的真实想法。不要用自己的思维去考虑用户，用户永远和你想象的不一样。同时，产品的设计也是一个不断迭代前进的过程，时代会变，用户的习惯也会变，但这都建立在循序渐进的基础上。完全完美的东西，世界上是不存在的。
2. 误区二：片面追求绚丽的功能

现在的前端技术越来越发达，各种绚丽的前端技巧都可以实现。 于是网站产品人员就巴不得把所有的交互技术都堆到网站上，以表现自己的“用户体验”。 其实，“绚丽!=用户体验” , 真正的应该是“简单=用户体验 ”。用户来访问你的网站，使用你的产品的功能，就一个要求：简单+便捷 。
3. 误区三：拍脑袋做决定

这个是大多数人都会犯的错误。 好多从事UED的人，都自我感觉非常良好，认为自己是最懂用户的。其实，所有的UED的决定，是不取决与任何某一个人的主观意见，而是取决于数据。 UED的任何措施，都是长期数据积累分析的结果 。包括用户的访问跟踪，行为分析，路径分析等。什么时候UED人员把自己当成“白痴” 去用自己的产品，去思考自己的产品时，什么时候懂得在杂乱无章的数据中找到事物发展的规律和方法，他才是一个合格的UED大师。
4. 误区四：人云亦云

这个错误也很常见，通常是自己想不出招来，就抄袭，模仿，认为别人这么干，一定有他自己的道理。这话是不错，但是每个产品都是自己的特性，都有自己不同的商业诉求和用户习惯。并不是说淘宝搞个什么，我们就抄个什么。一定要学会自己独立思考 ，按照自己的产品个性和用户习惯来制定UED策略。
5. 误区五：UED只是UI设计的事情

很多人认为UED只是UI设计的事情，特别是程序员，你怎么设计，我就怎么干，效果好不好与我无关。 这已经涉及到管理的问题了，每个人都是UED的设计者，每个人也都是产品的用户。只有集思广益，广开言路，才能做出优秀的产品 。而且，在UED人员中，除了产品设计，UE设计，前端开发，程序开发，还要将市场、运营所有的人调动起来。离开商业诉求的UED，只能沦落为自我YY。
6. 误区六：UED的目的是为了用户使用更方便

这句话并不全对，UED的终极目的不是为了用户，而是为了网站获得更大的营收。 比如很多网站一登录，会在右下角弹出一个广告小窗，或者新浪有时也是全屏弹广告， 而多如牛毛的下载站就更不用提了，你点10个“下载”链接，至少9个是假的。 但是，他们这样做是有道理的，糟糕的用户体验，有时候也是为营收服务的 ，这说明，追求用户体验有个平衡点，要根据自己的商业需要来寻求自己的平衡点。
7. 误区七：用户体验适合网站发展的任何时期

一个新建的网站，什么流量都没有，什么用户都没有，就去花很多人力和时间在用户体验设计上，有意义吗？用户体验是网站竞争白热化的一个产物，说白了，就是网站发展后期拼服务，用户体验是服务中的一个细小分类。 刚才已经说了，只有建立在用户数据积累和分析上的用户体验，才是有效的。一个新建立的网站，应该更多的把思路放在尽快上线给用户检验 ，尽快完善自己的流程设计，尽快拓展自己的用户群，尽快宣传自己拉升自己的网站流量上，至于“用户体验”，等时机成熟了再搞也不迟。
8. 误区八：为了用户体验经常改版

用户体验专家为了显示自己的“专业性”，为了显示自己“很忙”“很投入”，于是今天一个策划，明天一个策划。 不但开发人员被折腾，用户也被折腾。 实际上用户的习惯哪怕是不合理的，当他习惯之后，就很难去纠正。 这个时候，要去强力扭转，一定会发生老用户反水和流失。 所以，用户体验的修改，是一个小步慢跑，逐步推进的过程 ，每次只是一个小修改，等用户习惯后，在推另一个小修改，在不知不觉中，积少成多，完成一个庞大的改版任务。

以上的8点，都是本人的切身体会，如果网友有不同的意见，也欢迎一起讨论。"
  category_id: 1
  user_id: 1
  category_name: "web server"
  access: "everyone"
  
note_10:
  id: 10
  subject: "javascript变量"
  content: "javascript有两种变量：局部变量和全局变量。当然，我们这篇文章是帮助大家真正的区别这两种变量。
首先，局部变量是指只能在本变量声明的函数内部调用。全局变量时整个代码中都可以调用的变量。当然，单单从字面上理解肯定是不清楚的，下面我详细的介绍下：
大家都知道，变量是需要用var关键字声明的。但是javascript中也可以隐式的使用变量，就是不用声明，直接使用。而且，千万注意，javascript把隐式声明的变量总是当成全局变量来使用的。"
  category_id: 1
  user_id: 1
  category_name: "web server"
  access: "everyone"


